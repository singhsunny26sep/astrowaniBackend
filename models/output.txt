=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\astroServices\gemstoneQuery.js

const mongoose = require("mongoose");

const gemstoneQuerySchema = new mongoose.Schema(
  {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    gemstoneId: { type: mongoose.Schema.Types.ObjectId, ref: "Gemstone", required: true },
    queryType: { type: String, enum: ["purchase", "inquiry"], default: "inquiry" },
    message: { type: String, required: true },
    status: { type: String, enum: ["pending", "resolved", "cancelled"], default: "pending" },
    response: { type: String },
    respondedAt: { type: Date },
  },
  { timestamps: true }
);

module.exports = mongoose.model("GemstoneQuery", gemstoneQuerySchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\astroServices\gemstoneSchema.js

const mongoose = require("mongoose");

const gemstoneSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    images: [{ type: String }],
    availability: { type: Boolean, default: true },
    additionalInfo: {
      carat: { type: Number, required: true },
      zodiacSign: { type: String },
      weightInRatti: Number,
      weightInGrams: Number,
      colour: String,
      origin: String,
      quality: String,
      shape: String,
      mantra: String,
      size: String,
      certification: String,
      treatment: String,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Gemstone", gemstoneSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\astroServices\groupPujaSchema.js

const mongoose = require("mongoose");

const groupPujaSchema = new mongoose.Schema(
  {
    pujaName: { type: String, required: true },
    description: { type: String, required: true },
    bio: { type: String },
    pujaSold: { type: Number },
    pujaGodGoddes: { type: String },
    date: { type: Date, required: true },
    duration: { type: String, required: true }, // e.g., '2 hours'
    location: { type: String, required: true },
    price: { type: Number, required: true },
    maxParticipants: { type: Number, required: true },
    bookedParticipants: { type: Number, default: 0 },
    image: { type: String },
    Benefits: [String],
    astrologer: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Astrologer",
      required: true,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("GroupPuja", groupPujaSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\astroServices\vipPujaSchema.js

const mongoose = require("mongoose");

const vipPujaSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    image: { type: String },
    description: {
      type: String,
      required: true,
    },
    pujaSold: {
      type: Number,
      default: 0, // Assuming this tracks the number of times the puja has been sold
    },
    typesOfPuja: {
      type: String,
      enum: ["laghu", "maha", "beej mantra", "puranic", "vedic"],
      required: true,
    },
    daysOfPuja: {
      type: Number,
      required: true, // Number of days the puja takes
    },
    pujaGodGoddess: {
      type: String,
      required: true, // Name of the God or Goddess the puja is for
    },
    typeOfMantra: {
      type: String,
      required: true,
    },
    gender: {
      type: String,
      enum: ["both", "male", "female"],
      default: "both",
    },
    benefits: {
      type: [String], // Array of strings for the benefits of the puja
      required: true,
    },
    price: { type: Number, required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("VipPuja", vipPujaSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\appointmentModel.js

const mongoose = require("mongoose");

const AppointmentSchema = new mongoose.Schema(
    {
      userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true,
      },
      astrologerId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Astrologer",
        required: true,
      },
      date: {
        type: Date,
        required: true,
      },
      timeSlot: {
        start: {
          type: Date,
          required: true,
        },
        end: {
          type: Date,
          required: true,
        },
      },
      status: {
        type: String,
        enum: ["pending", "confirmed", "cancelled", "completed", "rescheduled"],
        default: "pending",
      },
      type: {
        type: String,
        enum: ["personal", "career", "relationship", "health", "other"],
        required: true,
      },
      concernDetails: {
        type: String,
        required: true,
      },
      birthDetails: {
        date: Date,
        time: String,
        place: String,
      },
      payment: {
        amount: {
          type: Number,
          required: true,
        },
        status: {
          type: String,
          enum: ["pending", "completed", "failed", "refunded"],
          default: "pending",
        },
        transactionId: String,
      },
      reminderSent: {
        type: Boolean,
        default: false,
      },
  
    },
    { timestamps: true }
  );
  module.exports = mongoose.model("Appointment", AppointmentSchema);

=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\astrologerModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const AstrologerSchema = new Schema(
  {
    name: {
      type: String,
      required: [true, "Please provide the astrologer's name"],
      trim: true,
    },
    email: {
      type: String,
      required: [true, "Please provide an email"],
      unique: true,
      match: [
        /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
        "Please provide a valid email",
      ],
    },
    phoneNumber: {
      type: String,
      required: [true, "Please provide a phone number"],
    },
    specialties: [
      {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true,
      },
    ],
    experience: {
      type: Number,
      required: [true, "Please provide years of experience"],
    },
    bio: {
      type: String,
      // required: [true, "Please provide a short biography"],
    },
    experienceAndQualification: {
      type: String,
      // required: [true, "Please provide a Experience And Qualification"],
    },
    profileImage: {
      type: String,
    },
    isAvailable: {
      type: Boolean,
      default: true,
    },
    pricing: {
      type: Number,
      // required: [true, "Please provide the pricing per consultation"],
    },
    userId: {
      type: Schema.Types.ObjectId,
      ref: "User",
      // required: true,
    },
    language: [String],
    isChatEnabled: {
      type: Boolean,
      default: true,
    },
    isCallEnabled: {
      type: Boolean,
      default: true, 
    },
    chatChargePerMinute: {
      type: Number,
      required: true, 
      default: 0, 
    },
    callChargePerMinute: {
      type: Number,
      required: true, 
      default: 0, 
    },
  },
  { timestamps: true }
);

const Astrologer = mongoose.model("Astrologer", AstrologerSchema);

module.exports = Astrologer;


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\astrologerRequestModel.js

const mongoose = require('mongoose');

const astrologerRequestSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    phone: { type: String, required: true },
    expertise: { type: String, required: true },
    status: { type: String, enum: ['Pending', 'Approved', 'Rejected'], default: 'Pending' },
}, { timestamps: true });

module.exports = mongoose.model('AstrologerRequest', astrologerRequestSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\BannerModel.js

const mongoose = require("mongoose");

const bannerSchema = new mongoose.Schema(
  {
    imageUrl: {
      type: String,
      required: true,
    },
    title: {
      type: String,
      trim: true,
      default: null,
    },
    description: {
      type: String,
      trim: true,
      default: null,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Banner", bannerSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\blogModel.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

const BlogSchema = new Schema(
  {
    english: {
      title: { type: String, required: true },
      slug: { type: String, required: true, unique: true },
      content: { type: String, required: true },
      excerpt: { type: String },
      metaDescription: { type: String },
      keywords: [{ type: String }],
    },
    hindi: {
      title: { type: String, required: true },
      slug: { type: String, required: true, unique: true },
      content: { type: String, required: true },
      excerpt: { type: String },
      metaDescription: { type: String },
      keywords: [{ type: String }],
    },
    slug: { type: String, required: true, unique: true },
    thumbnail: { type: String, required: true },
    category: {
      type: Schema.Types.ObjectId,
      ref: "Category",
      required: true,
    },
  },
  { timestamps: true }
);

const Blog = mongoose.model("Blog", BlogSchema);

module.exports = Blog;


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\CallHistory.js

const mongoose = require("mongoose");

const CallHistorySchema = new mongoose.Schema(
  {
    astrologerId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User", // assuming User schema has astrologers
      required: true,
    },
    clientId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User", // assuming User schema has clients
      required: true,
    },
    callStartTime: {
      type: Date,
      required: true,
    },
    callEndTime: {
      type: Date,
      required: true,
    },
    callDuration: {
      type: Number, // Duration in minutes
      required: true,
    },
    callStatus: {
      type: String,
      enum: ["completed", "missed", "canceled"],
      default: "completed",
    },
    rating: {
      type: Number, // Rating out of 5
      min: 1,
      max: 5,
    },
    comments: {
      type: String,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("CallHistory", CallHistorySchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\categoryModel.js

const mongoose = require("mongoose");

const categorySchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },
    image: String,
  },
  {
    timestamps: true,
  }
);

const Category = mongoose.model("Category", categorySchema);

module.exports = Category;


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\chatModel.js

const mongoose = require("mongoose");

const chatSchema = new mongoose.Schema(
  {
    sessionId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Session",
      required: true,
    },
    sender: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User", // or "Astrologer" based on role
      required: true,
    },
    message: {
      type: String,
      required: true,
    },
    sentAt: {
      type: Date,
      default: Date.now,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Chat", chatSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\consultationModel.js

const mongoose = require("mongoose");

const ConsultationSchema = new mongoose.Schema(
    {
      userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true,
      },
      astrologerId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Astrologer",
        required: true,
      },
      type: {
        type: String,
        enum: ["chat", "call", "video"],
        required: true,
      },
      status: {
        type: String,
        enum: ["scheduled", "ongoing", "completed", "cancelled"],
        default: "scheduled",
      },
      scheduledAt: {
        type: Date,
        required: true,
      },
      duration: {
        type: Number, // in minutes
        required: true,
      },
      charge: {
        type: Number,
        required: true,
      },
      questions: [{
        type: String,
        trim: true,
      }],
      preferences: {
        language: {
          type: String,
          required: true,
        },
        // Additional consultation preferences
      },
      notes: {
        type: String,
        trim: true,
      },
      payment: {
        status: {
          type: String,
          enum: ["pending", "completed", "failed", "refunded"],
          default: "pending",
        },
        transactionId: String,
        paidAmount: Number,
      },
    },
    { timestamps: true }
  );
  module.exports =mongoose.model("Consultation", ConsultationSchema);

=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\horoscopeModel.js

const mongoose = require('mongoose');

const horoscopeSchema = new mongoose.Schema({
  zodiacSign: {
    type: String,
    required: true,
    enum: [
      "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
      "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"
    ],
  },
  type: {
    type: String,
    required: true,
    enum: ["Daily", "Weekly", "Monthly", "Yearly"], // The type of horoscope
  },
  dateRange: {
    type: String,
    required: true,
  },  
  description: {
    type: String,
    required: true, // Horoscope content
  },
  luckyNumber: {
    type: Number,
    required: false,
  },
  luckyColor: {
    type: String,
    required: false,
  },
  Image: {
    type: String,
  },

}, { timestamps: true });

module.exports = mongoose.model('Horoscope', horoscopeSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\navgrahModel.js

const mongoose = require('mongoose');

const navgrahSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true,
  },
  description: {
    type: String,
    required: true,
  },
  remedies: {
    type: String, // Remedies associated with the graha
    required: false,
  },
  mantra: {
    type: String, // Mantra for the graha
    required: false,
  },
  effects: {
    type: String, // Effects of the graha in a chart
    required: false,
  },
  deity: {
    type: String, // Deity associated with the graha
    required: false,
  },
  color: {
    type: String, // Color associated with the graha
    required: false,
  },
  gemstone: {
    type: String, // Gemstone associated with the graha
    required: false,
  },
  metal: {
    type: String, // Metal associated with the graha
    required: false,
  },
  status: {
    type: Boolean, // Enable or disable the graha display
    default: true,
  },
}, { timestamps: true });

module.exports = mongoose.model('Navgrah', navgrahSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\notificationModel.js

// models/notificationModel.js
const mongoose = require("mongoose");

const NotificationSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    // type: {
    //   type: String,
    //   enum: [
    //     "appointment", 
    //     "payment", 
    //     "message", 
    //     "reminder", 
    //     "announcement",
    //     "session",
    //     "support",
    //   ],
    //   required: true,
    // },
    title: {
      type: String,
      required: true,
    },
    message: {
      type: String,
      required: true,
    },
   
    isRead: {
      type: Boolean,
      default: false,
    },
    isSent: {
      type: Boolean,
      default: false,
    },
    priority: {
      type: String,
      enum: ["low", "normal", "high"],
      default: "normal",
    },
    metadata: {
      // Additional information
      appointmentId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Appointment",
      },
      sessionId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Session",
      },
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Notification", NotificationSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\plansModel.js

const mongoose = require("mongoose");

const planSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    price: { type: Number, required: true },
    questions: { type: Number, required: true },
    includesRemedies: { type: Boolean, required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Plan", planSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\reviewSchema.js

const mongoose = require("mongoose");
const { Schema } = mongoose;

// Review Schema
const ReviewSchema = new Schema(
  {
    user: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    astrologer: {
      type: Schema.Types.ObjectId,
      ref: "Astrologer",
      required: true,
    },
    rating: {
      type: Number,
      min: 1,
      max: 5,
      required: [true, "Please provide a rating between 1 and 5"],
    },
    comment: {
      type: String,
      required: [true, "Please provide a comment for your review"],
    },
  },
  { timestamps: true }
);

const Review = mongoose.model("Review", ReviewSchema);

module.exports = Review;


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\sessionModel.js

const mongoose = require("mongoose");

const sessionSchema = new mongoose.Schema(
  {
    sessionType: {
      type: String,
      enum: ["chat", "audioCall", "videoCall", "liveVideo"],
      required: true,
    },
    astrologerId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Astrologer",
      required: true,
    },
    clientId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    startTime: {
      type: Date,
      required: true,
    },
    endTime: {
      type: Date,
    },
    duration: {
      type: Number, // Duration in minutes
    },
    chargePerMinute: {
      type: Number,
      required: true, // Astrologer's rate per minute
    },
    totalCharge: {
      type: Number,
    },
    status: {
      type: String,
      enum: ["completed", "ongoing", "canceled", "missed"],
      default: "ongoing",
    },
    isPaid: {
      type: Boolean,
      default: false,
    },
    rating: {
      type: Number,
      min: 1,
      max: 5,
    },
    feedback: {
      type: String,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Session", sessionSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\support.js

const mongoose = require("mongoose");

const supportSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      required: true,
      trim: true,
    },
    issueType: {
      type: String,
      required: true,
      enum: [
        "Technical Issue",
        "Account Related Issue",
        "Refund Request",
        "Feedback",
        "Other",
      ],
      default: "General Inquiry",
    },
    supportType: {
      type: String,
      required: true,
      enum: [
        "Contact Support",
        "Feedback",
      ],
      default: "Contact Support",
    },
    message: {
      type: String,
      required: true,
      trim: true,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Support", supportSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\Thought.js

const mongoose = require("mongoose");

const thoughtSchema = new mongoose.Schema(
    {
        thoughtText: {
            type: String,
            required: true,
            trim: true,
        },
        author: {
            type: String,
            required: false,
            trim: true,
            default: "Anonymous",
        },
        date: {
            type: Date,
            required: true,
            default: Date.now,
        },
    },
    { timestamps: true }
);

module.exports = mongoose.model("Thought", thoughtSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\userModel.js

const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const config = require("../config/config");

const UserSchema = new mongoose.Schema(
  {
    email: {
      type: String,
      required: [true, "Please provide an email"],
      unique: true,
      match: [
        /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
        "Please provide a valid email",
      ],
    },
    password: {
      type: String,
      required: [
        function () {
          // Password is required only if the role is 'admin'
          return this.role === "admin";
        },
        "Password is required for admin users.",
      ],
      minlength: [6, "Password must be at least 6 characters long."],
      select: false,
    },
    role: {
      type: String,
      enum: ["customer", "admin", "astrologer"],
      default: "customer",
    },
    firstName: {
      type: String,
    },
    lastName: {
      type: String,
    },
    gender: {
      type: String,
      enum: ["male", "female", "other"],
    },
    maritalSatus: String,
    dateOfBirth: Date,
    timeOfBirth: Date,
    phoneNumber: String,
    profilePic: String,
    favoriteAstrologer: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Astrologer",
      },
    ],
    address: {
      city: String,
      pinCode: Number,
      location: String,
      State: String,
    },
    isVerified: {
      type: Boolean,
      default: false,
    },
    otp: {
      code: String,
      expiresAt: Date,
    },
    fcm:{
      type:String
    }
  },
  { timestamps: true }
);

UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

UserSchema.methods.getSignedJwtToken = function (options = {}) {
  const { expiresIn, secret } = options;

  return jwt.sign({ id: this._id, role: this.role }, secret, { expiresIn });
};

module.exports = mongoose.model("User", UserSchema);


=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\walletModel.js

const mongoose = require("mongoose");

const WalletSchema = new mongoose.Schema(
    {
      userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true,
        unique: true,
      },
      balance: {
        type: Number,
        default: 0,
        min: 0,
      },
      currency: {
        type: String,
        default: "INR",
      },
      isActive: {
        type: Boolean,
        default: true,
      },
    },
    { timestamps: true }
  );
  module.exports = mongoose.model("Wallet", WalletSchema);

=======================================================================
E:\WORK\ABS\Projects\Astrology\server\models\walletTransactionModel.js

const mongoose = require("mongoose");
const WalletTransactionSchema = new mongoose.Schema(
    {
      walletId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Wallet",
        required: true,
      },
      type: {
        type: String,
        enum: ["credit", "debit"],
        required: true,
      },
      amount: {
        type: Number,
        required: true,
      },
      description: {
        type: String,
        required: true,
      },
      status: {
        type: String,
        enum: ["pending", "completed", "failed"],
        default: "pending",
      },
      referenceId: {
        type: String,
        // For payment gateway reference
      },
      metadata: {
        // Additional information about the transaction
        sessionId: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "Session",
        },
        appointmentId: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "Appointment",
        },
      },
    },
    { timestamps: true }
  );
  module.exports =mongoose.model("WalletTransaction", WalletTransactionSchema);

